Next Steps:
    * [DONE] Compute the overlap matrix for H20 and make sure it matches the literature
	* Do a data-driven re-write
		- How does computation time compare?
	* Can we get a performance increase from using a standard algorithm that can
		parallelize some of the computation?



Data driven rewrite:
	* Get rid of generic orbital/shell/etc. classes
	* Implement specific classes/structs for basis/shell/orbital combinations
	* Add gcem (https://github.com/kthohr/gcem) to perform compile-time normalization computation
		- Make sure normalization values agree
	* Look at how the overlap computations are performed
		- Is there room for improvement?
		- Can we parallelize computing the different values in the overlap matrix?





For unit testing, implement logging with colors




Basis Sets
	* Support the following basis sets:
		- STO-3G, STO-6G, 6-31G, 6-31G* [aka 6-31G(d)], 6-31G** [aka 6-31G(d,p)]
	* Support all atoms up to Calcium (20)

Overlap Matrix
	* Make sure we can compute the overlap matrix for a variety of atoms/positions
	* Make sure results align with the Hartree Fock program, PySCF, and published values
	* Look at the PySCF implmentation and look for potential improvements
	* Does it actually help to cache computed values? Is there not a way to simply
		omit any attempt to calculate those values in the first place?

Profiling
	* Go ahead and add profiling now so we have it from the outset

Unit Tests
	* Add unit tests for all computations
	* Cite sources for expected values